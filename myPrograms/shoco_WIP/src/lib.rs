


use std::convert::TryInto;

use ::libc;
#[cfg(target_arch = "x86")]
pub use core::arch::x86::{
    __m128i, _mm_and_si128, _mm_cmpgt_epi16, _mm_load_si128, _mm_setzero_si128,
    _mm_movemask_epi8,
};
#[cfg(target_arch = "x86_64")]
pub use core::arch::x86_64::{
    __m128i, _mm_and_si128, _mm_cmpgt_epi16, _mm_load_si128, _mm_setzero_si128,
    _mm_movemask_epi8,
};
pub type __int8_t = libc::c_schar;
pub type __int16_t = libc::c_short;
pub type __uint32_t = libc::c_uint;
pub type int8_t = __int8_t;
pub type int16_t = __int16_t;
pub type uint32_t = __uint32_t;
pub type size_t = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Pack {
    pub word: uint32_t,
    pub bytes_packed: libc::c_uint,
    pub bytes_unpacked: libc::c_uint,
    pub offsets: [libc::c_uint; 8],
    pub masks: [int16_t; 8],
    pub header_mask: libc::c_char,
    pub header: libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Code {
    pub word: uint32_t,
    pub bytes: [libc::c_char; 4],
}
static mut chrs_by_chr_id: [libc::c_char; 32] = [
    'e' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'H' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    '\'' as i32 as libc::c_char,
    'B' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'W' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
];
static mut chr_ids_by_chr: [int8_t; 256] = [
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    26 as libc::c_int as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    23 as libc::c_int as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    27 as libc::c_int as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    22 as libc::c_int as int8_t,
    29 as libc::c_int as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    31 as libc::c_int as int8_t,
    24 as libc::c_int as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    25 as libc::c_int as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    30 as libc::c_int as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    1 as libc::c_int as int8_t,
    15 as libc::c_int as int8_t,
    11 as libc::c_int as int8_t,
    14 as libc::c_int as int8_t,
    0 as libc::c_int as int8_t,
    17 as libc::c_int as int8_t,
    18 as libc::c_int as int8_t,
    5 as libc::c_int as int8_t,
    2 as libc::c_int as int8_t,
    -(1 as libc::c_int) as int8_t,
    21 as libc::c_int as int8_t,
    9 as libc::c_int as int8_t,
    13 as libc::c_int as int8_t,
    6 as libc::c_int as int8_t,
    3 as libc::c_int as int8_t,
    16 as libc::c_int as int8_t,
    -(1 as libc::c_int) as int8_t,
    7 as libc::c_int as int8_t,
    8 as libc::c_int as int8_t,
    4 as libc::c_int as int8_t,
    10 as libc::c_int as int8_t,
    19 as libc::c_int as int8_t,
    12 as libc::c_int as int8_t,
    28 as libc::c_int as int8_t,
    20 as libc::c_int as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
    -(1 as libc::c_int) as int8_t,
];
static mut successor_ids_by_chr_id_and_chr_id: [[int8_t; 32]; 32] = [
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
    [
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
        -(1 as libc::c_int) as int8_t,
    ],
];
static mut chrs_by_chr_and_successor_id: [[int8_t; 16]; 83] = [
    [
        115 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        118 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        45 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        69 as libc::c_int as int8_t,
        65 as libc::c_int as int8_t,
        84 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        45 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        98 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        104 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        119 as libc::c_int as int8_t,
        112 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        117 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        73 as libc::c_int as int8_t,
        69 as libc::c_int as int8_t,
        82 as libc::c_int as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        101 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        65 as libc::c_int as int8_t,
        69 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        116 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        39 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        73 as libc::c_int as int8_t,
        78 as libc::c_int as int8_t,
        76 as libc::c_int as int8_t,
        69 as libc::c_int as int8_t,
        65 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        86 as libc::c_int as int8_t,
        90 as libc::c_int as int8_t,
        82 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        111 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        73 as libc::c_int as int8_t,
        76 as libc::c_int as int8_t,
        68 as libc::c_int as int8_t,
        39 as libc::c_int as int8_t,
        69 as libc::c_int as int8_t,
        89 as libc::c_int as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        114 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        89 as libc::c_int as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        104 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        69 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        119 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        72 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        82 as libc::c_int as int8_t,
        90 as libc::c_int as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        104 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        73 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        110 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        118 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        98 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        103 as libc::c_int as int8_t,
        112 as libc::c_int as int8_t,
        107 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
    ],
    [
        101 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        106 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        98 as libc::c_int as int8_t,
        118 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        104 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
    ],
    [
        111 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        104 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        107 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        113 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        45 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
    ],
    [
        101 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        45 as libc::c_int as int8_t,
        103 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        118 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
    ],
    [
        114 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        118 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        120 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        112 as libc::c_int as int8_t,
    ],
    [
        111 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        45 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        107 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        39 as libc::c_int as int8_t,
    ],
    [
        104 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        103 as libc::c_int as int8_t,
        45 as libc::c_int as int8_t,
        98 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
    ],
    [
        101 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        98 as libc::c_int as int8_t,
        39 as libc::c_int as int8_t,
        45 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
    ],
    [
        110 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        103 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        118 as libc::c_int as int8_t,
        122 as libc::c_int as int8_t,
        98 as libc::c_int as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        101 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        104 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        45 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        119 as libc::c_int as int8_t,
        103 as libc::c_int as int8_t,
        39 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
    ],
    [
        101 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        107 as libc::c_int as int8_t,
        119 as libc::c_int as int8_t,
        118 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        112 as libc::c_int as int8_t,
    ],
    [
        101 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        112 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        98 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        39 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        45 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
    ],
    [
        100 as libc::c_int as int8_t,
        103 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        107 as libc::c_int as int8_t,
        39 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        118 as libc::c_int as int8_t,
    ],
    [
        117 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        119 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        118 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
        112 as libc::c_int as int8_t,
        107 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
    ],
    [
        101 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        112 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        104 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        98 as libc::c_int as int8_t,
        45 as libc::c_int as int8_t,
        39 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
    ],
    [
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        101 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        103 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
    ],
    [
        101 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        104 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        112 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        119 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        107 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
    ],
    [
        104 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        119 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        39 as libc::c_int as int8_t,
        45 as libc::c_int as int8_t,
    ],
    [
        114 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        103 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        112 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        98 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
    ],
    [
        101 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        97 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        104 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
        45 as libc::c_int as int8_t,
        107 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        39 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        98 as libc::c_int as int8_t,
    ],
    [
        112 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        99 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        104 as libc::c_int as int8_t,
        113 as libc::c_int as int8_t,
        117 as libc::c_int as int8_t,
        102 as libc::c_int as int8_t,
        45 as libc::c_int as int8_t,
        121 as libc::c_int as int8_t,
        111 as libc::c_int as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
        '\0' as i32 as int8_t,
    ],
    [
        111 as libc::c_int as int8_t,
        101 as libc::c_int as int8_t,
        115 as libc::c_int as int8_t,
        116 as libc::c_int as int8_t,
        105 as libc::c_int as int8_t,
        100 as libc::c_int as int8_t,
        39 as libc::c_int as int8_t,
        108 as libc::c_int as int8_t,
        98 as libc::c_int as int8_t,
        45 as libc::c_int as int8_t,
        109 as libc::c_int as int8_t,
        97 as libc::c_int as int8_t,
        114 as libc::c_int as int8_t,
        112 as libc::c_int as int8_t,
        110 as libc::c_int as int8_t,
        119 as libc::c_int as int8_t,
    ],
];
static mut packs: [Pack; 3] = [
    {
        let mut init = Pack {
            word: 0x80000000 as libc::c_uint,
            bytes_packed: 1.0f64 as libc::c_uint,
            bytes_unpacked: 2 as libc::c_int as libc::c_uint,
            offsets: [
                26 as libc::c_int as libc::c_uint,
                24 as libc::c_int as libc::c_uint,
                24 as libc::c_int as libc::c_uint,
                24 as libc::c_int as libc::c_uint,
                24 as libc::c_int as libc::c_uint,
                24 as libc::c_int as libc::c_uint,
                24 as libc::c_int as libc::c_uint,
                24 as libc::c_int as libc::c_uint,
            ],
            masks: [
                15 as libc::c_int as int16_t,
                3 as libc::c_int as int16_t,
                0 as libc::c_int as int16_t,
                0 as libc::c_int as int16_t,
                0 as libc::c_int as int16_t,
                0 as libc::c_int as int16_t,
                0 as libc::c_int as int16_t,
                0 as libc::c_int as int16_t,
            ],
            header_mask: 0xc0 as libc::c_int as libc::c_char,
            header: 0x80 as libc::c_int as libc::c_char,
        };
        init
    },
    {
        let mut init = Pack {
            word: 0xc0000000 as libc::c_uint,
            bytes_packed: 2.0f64 as libc::c_uint,
            bytes_unpacked: 4 as libc::c_int as libc::c_uint,
            offsets: [
                25 as libc::c_int as libc::c_uint,
                22 as libc::c_int as libc::c_uint,
                19 as libc::c_int as libc::c_uint,
                16 as libc::c_int as libc::c_uint,
                16 as libc::c_int as libc::c_uint,
                16 as libc::c_int as libc::c_uint,
                16 as libc::c_int as libc::c_uint,
                16 as libc::c_int as libc::c_uint,
            ],
            masks: [
                15 as libc::c_int as int16_t,
                7 as libc::c_int as int16_t,
                7 as libc::c_int as int16_t,
                7 as libc::c_int as int16_t,
                0 as libc::c_int as int16_t,
                0 as libc::c_int as int16_t,
                0 as libc::c_int as int16_t,
                0 as libc::c_int as int16_t,
            ],
            header_mask: 0xe0 as libc::c_int as libc::c_char,
            header: 0xc0 as libc::c_int as libc::c_char,
        };
        init
    },
    {
        let mut init = Pack {
            word: 0xe0000000 as libc::c_uint,
            bytes_packed: 4.0f64 as libc::c_uint,
            bytes_unpacked: 8 as libc::c_int as libc::c_uint,
            offsets: [
                23 as libc::c_int as libc::c_uint,
                19 as libc::c_int as libc::c_uint,
                15 as libc::c_int as libc::c_uint,
                11 as libc::c_int as libc::c_uint,
                8 as libc::c_int as libc::c_uint,
                5 as libc::c_int as libc::c_uint,
                2 as libc::c_int as libc::c_uint,
                0 as libc::c_int as libc::c_uint,
            ],
            masks: [
                31 as libc::c_int as int16_t,
                15 as libc::c_int as int16_t,
                15 as libc::c_int as int16_t,
                15 as libc::c_int as int16_t,
                7 as libc::c_int as int16_t,
                7 as libc::c_int as int16_t,
                7 as libc::c_int as int16_t,
                3 as libc::c_int as int16_t,
            ],
            header_mask: 0xf0 as libc::c_int as libc::c_char,
            header: 0xe0 as libc::c_int as libc::c_char,
        };
        init
    },
];
#[inline]
pub fn decode_header(mut val: u8) -> i32 {
    let mut i = -1;
    while (val as i8) < 0 {
        val = val << 1;
        i += 1;
    }
    i
}

#[inline]
unsafe extern "C" fn check_indices(
    mut indices: *const int16_t,
    mut pack_n: libc::c_int,
) -> libc::c_int {
    let mut zero = _mm_setzero_si128();
    let mut indis = _mm_load_si128(indices as *mut __m128i);
    let mut masks = _mm_load_si128(
        (packs[pack_n as usize].masks).as_ptr() as *mut __m128i,
    );
    let mut cmp = _mm_cmpgt_epi16(indis, masks);
    let mut mmask = _mm_cmpgt_epi16(masks, zero);
    cmp = _mm_and_si128(cmp, mmask);
    let mut result = _mm_movemask_epi8(cmp);
    return (result == 0 as libc::c_int) as libc::c_int;
}
#[inline]
unsafe extern "C" fn find_best_encoding(
    mut indices: *const int16_t,
    mut n_consecutive: libc::c_uint,
) -> libc::c_int {
    let mut p = 3 as libc::c_int - 1 as libc::c_int;
    while p >= 0 as libc::c_int {
        if n_consecutive >= packs[p as usize].bytes_unpacked
            && check_indices(indices, p) != 0
        {
            return p;
        }
        p -= 1;
        p;
    }
    return -(1 as libc::c_int);
}
#[no_mangle]
pub fn shoco_compress(original: &str, out: &mut [u8]) -> usize {
    // Assume the following are defined elsewhere:
    // chr_ids_by_chr: mutable static [i16],
    // successor_ids_by_chr_id_and_chr_id: mutable static [[i16]],
    // packs: mutable static [Pack],
    // find_best_encoding: unsafe extern "C" fn(*const i16, u32) -> i32,
    // 
    // Also, assume Pack is a struct with fields:
    //   word: u32,
    //   bytes_unpacked: u8,
    //   bytes_packed: u8,
    //   offsets: [u32; 8]
    //
    // The original Code union is replaced by a local u32 variable.
    println!("Somehow im linking correctly");
    let original_bytes = original.as_bytes();
    let original_len = original_bytes.len();
    let mut pos = 0;
    let mut out_pos = 0;
    
    while pos < original_len {
        // Stop if we encounter a NUL byte.
        if original_bytes[pos] == 0 {
            break;
        }
        
        // Build indices based on the input sequence.
        let mut indices: [i16; 8] = [0; 8];
        indices[0] = unsafe { chr_ids_by_chr[original_bytes[pos] as usize] } as i16;
        let mut last_chr_index = indices[0] as i32;
        
        if last_chr_index >= 0 {
            let rest = original_len - pos;
            let mut n_consecutive: u32 = 1;
            while n_consecutive <= 7 {
                if (n_consecutive as usize) == rest {
                    break;
                }
                let current_index = unsafe {
                    chr_ids_by_chr[original_bytes[pos + n_consecutive as usize] as usize]
                } as i32;
                if current_index < 0 {
                    break;
                }
                let successor_index = unsafe {
                    successor_ids_by_chr_id_and_chr_id[last_chr_index as usize]
                        [current_index as usize]
                } as i32;
                if successor_index < 0 {
                    break;
                }
                indices[n_consecutive as usize] = successor_index as i16;
                last_chr_index = current_index;
                n_consecutive += 1;
            }
            if n_consecutive >= 2 {
                let pack_n = unsafe { find_best_encoding(indices.as_ptr(), n_consecutive) };
                if pack_n >= 0 {
                    // Access the pack from the global packs.
                    let pack = unsafe { packs[pack_n as usize] };
                    if out_pos + (pack.bytes_packed as usize) > out.len() {
                        return out.len() + 1;
                    }
                    // Instead of using a union, use a local variable.
                    let mut code_word: u32 = pack.word;
                    for i in 0..(pack.bytes_unpacked as usize) {
                        code_word |= (indices[i] as u32) << pack.offsets[i];
                    }
                    // Swap byte order as in the original code.
                    code_word = code_word.swap_bytes();
                    let code_bytes = code_word.to_ne_bytes();
                    for i in 0..(pack.bytes_packed as usize) {
                        out[out_pos + i] = code_bytes[i];
                    }
                    out_pos += pack.bytes_packed as usize;
                    pos += pack.bytes_unpacked as usize;
                    continue;
                }
            }
        }
        // If compression was not applied, output the literal byte.
        if original_bytes[pos] & 0x80 != 0 {
            if out_pos + 2 > out.len() {
                return out.len() + 1;
            }
            out[out_pos] = 0;
            out[out_pos + 1] = original_bytes[pos];
            out_pos += 2;
        } else {
            if out_pos + 1 > out.len() {
                return out.len() + 1;
            }
            out[out_pos] = original_bytes[pos];
            out_pos += 1;
        }
        pos += 1;
    }
    out_pos
}

#[no_mangle]
pub fn shoco_decompress(
    original: &[libc::c_char],
    out: &mut [libc::c_char],
) -> usize {
    let mut in_pos = 0;
    let mut out_pos = 0;
    let in_len = original.len();
    let out_len = out.len();

    while in_pos < in_len {
        // Call to decode_header is unsafe.
        let mark = unsafe { decode_header(original[in_pos] as u8) };
        if mark < 0 {
            if out_pos >= out_len {
                return out_len.wrapping_add(1);
            }
            if original[in_pos] == 0 {
                in_pos += 1;
                if in_pos >= in_len {
                    return usize::MAX;
                }
            }
            out[out_pos] = original[in_pos];
            out_pos += 1;
            in_pos += 1;
        } else {
            // Accessing mutable statics is unsafe.
            let pack = unsafe { &packs[mark as usize] };
            if out_pos + pack.bytes_unpacked as usize > out_len {
                return out_len.wrapping_add(1);
            } else if in_pos + pack.bytes_packed as usize > in_len {
                return usize::MAX;
            }
            // Build the code word.
            let mut word: u32 = 0;
            for i in 0..(pack.bytes_packed as usize) {
                let byte = original[in_pos + i] as u8;
                word |= (byte as u32) << (8 * i);
            }
            word = word.swap_bytes();
            let offset0 = pack.offsets[0] as u32;
            let mask0 = pack.masks[0] as u32;
            // Use unsafe to access mutable statics.
            let first_char = unsafe { chrs_by_chr_id[((word >> offset0) & mask0) as usize] };
            out[out_pos] = first_char;
            let mut last_chr = first_char;
            for i in 1..(pack.bytes_unpacked as usize) {
                let offset = pack.offsets[i] as u32;
                let mask = pack.masks[i] as u32;
                let chr_index = (last_chr as u8).wrapping_sub(39) as usize;
                let successor_index = ((word >> offset) & mask) as usize;
                let next_char = unsafe { chrs_by_chr_and_successor_id[chr_index][successor_index] } as libc::c_char;
                out[out_pos + i] = next_char;
                last_chr = next_char;
            }
            out_pos += pack.bytes_unpacked as usize;
            in_pos += pack.bytes_packed as usize;
        }
    }
    if out_pos < out_len {
        out[out_pos] = 0;
    }
    out_pos
}


pub fn main() {
    // No operations needed; functionality is defined elsewhere.
}
